---
layout: post
title:  "docker"
date:   2023-04-24 23:22:07 +0000
categories: jekyll
tags: docker
---

# docker

`docker`由两部分组成：`docker/cli`编译出`docker`，`moby`项目编译出`dockerd`

## debug

### cli

`docker/cli` is developed using Docker.

```shell

> make help
dev                  start a build container in interactive mode for in-container development
shell                alias for dev
clean                remove build artifacts

```

`/Makefile`

```Makefile

.PHONY: dev
dev:
    $(MAKE) -f docker.Makefile dev

```

`/docker.Makefile`

```Makefile

.PHONY: build_docker_image
build_docker_image:
	# build dockerfile from stdin so that we don't send the build-context; source is bind-mounted in the development environment
	cat ./dockerfiles/Dockerfile.dev | docker build ${DOCKER_BUILD_ARGS} --build-arg=GO_VERSION -t $(DEV_DOCKER_IMAGE_NAME) -

.PHONY: dev
dev: build_docker_image
    $(DOCKER_RUN) -it \
		--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
		--net=host \
		$(DEV_DOCKER_IMAGE_NAME)

```

修改`/dockerfiles/Dockerfile.dev`增加`godlv`用于远程调试

```Dockerfile

# 参照其他几处`go install xxx`
FROM golang AS godlv
RUN --mount=type=cache,target=/root/.cache/go-build \
    --mount=type=cache,target=/go/pkg/mod \
    --mount=type=tmpfs,target=/go/src/ \
    GO111MODULE=on GOPROXY=https://goproxy.cn go install github.com/go-delve/delve/cmd/dlv@v1.20.2

COPY --from=godlv           /go/bin/* /go/bin/

# 最后增加ENTRYPOINT直接在重启启动时编译和远程调试
ENTRYPOINT make binary; dlv --listen=:2345 --headless=true --api-version=2 exec build/docker

```

### moby

`docs/contributing`

The Docker daemon inside the development container can be debugged with [Delve](https://github.com/go-delve/delve).

Delve debugger listens on a port, which has to be exposed outside the development container.
Also, in order to be able to debug the daemon, it has to be compiled with the debugging symbols.
This can be done by launching the development container with the following command:

```bash
$ make BIND_DIR=. DOCKER_DEBUG=1 DELVE_PORT=2345:2345 shell
```

The `DOCKER_DEBUG` variable disables build optimizations, allowing to debug the binary,
while `DELVE_PORT` publishes the specified port for use with the debugger.

The `DELVE_PORT` variable accepts the port in the same format as Docker CLI's `--publish` (`-p`) option.
This means that the port can be published in multiple ways:

1. `DELVE_PORT=127.0.0.1:2345:2345` - exposes debugger on port `2345` for local development only (recommended)
2. `DELVE_PORT=2345:2345` - exposes debugger on port `2345` without binding to specific IP
3. `DELVE_PORT=2345` - same as above

在`Makefile`中增加以下内容

```Makefile

dev: build
	$(DOCKER_RUN_DOCKER) ./hack/make.sh binary
	$(DOCKER_RUN_DOCKER) dlv --listen=:2346 --headless=true --api-version=2 exec bundles/binary-daemon/dockerd

```

通过命令`make BIND_DIR=. DOCKER_DEBUG=1 DELVE_PORT=2346:2346 dev`启动远程调试

## 常用命令