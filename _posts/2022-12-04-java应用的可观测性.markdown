---
layout: post
title:  "java应用的可观测性"
date:   2022-12-04 02:56:07 +0800
categories: java
tags: java javaagent
---

# java应用的可观测性

最近看了一本书《Linux Observability with BPF》，开头就介绍了应用的可观测性，这是我第一次听说这个概念。

> Over the past few decades computing systems have only grown in complexity. Reasoning about how software behaves has created multiple business categories, all of them trying solve the challenges of gaining insight into complex systems. One approach to get this visibility is to analyze the logs of data generated by all applications running in a computing system. Logs are a great source of information. They can give you precise data about how an application is behaving. However, they constrain you because you get only the information that the engineers who built the application exposed in those logs. Gathering any additional information in log format from any system can be as challenging as decompiling the program and looking at the execution flow. Another popular approach is to use metrics to reason why a program behaves the way it does. Metrics differ from logs in the data format; whereas logs give you explicit data, metrics aggregate data to measure how a program behaves at a specific point in time.

应用越来越复杂，怎么知道应用的行为是否符合预期呢？
最常见的方式是分析log，log可以包含很多信息，但是log最大的问题是需要提前规划把哪些信息写入log。
另一种研究系统行为的方式是metric。
metric和log的区别是数据格式，log里记录的是明细数据，metric一般收集的是聚合数据。

> Observability is an emergent practice that approaches this problem from an different angle. People define observability as the capacity that we have to ask arbitrary questions and receive complex answers from any given system. A key difference between observability, logs, and metrics aggregation is the data that you collect. Given that by practicing observability you need to answer any arbitrary question at any point in time, the only way to reason about data is by collecting all of the data that your system can generate and aggregating it only when it’s necessary to answer your questions.

可观测性是一种从另外一个角度解决此问题的新兴方式。
人们把可观测性定义为可以随时回答与某个系统有关的任意问题的能力。
可观测性与metric和log的核心区别是可观测性不需要预先规划待收集的信息。

> Nassim Nicholas Taleb, the author of best-seller books like Antifragile: Things That Gain From Disorder (Penguin Random House), popularized the term Black Swan for unexpected events, with major consequences, that could have been expected if they had been observed before they happened. In his book The Black Swan (Penguin Random House), he rationalizes how having relevant data could help in risk mitigation for these rare events. Black Swan events are more common than we think in software engineering, and they are inevitable. Because we can assume that we cannot prevent these kinds of events, our only option is to have as much information as possible about them to address them without affecting business systems in a critical way. Observability helps us build robust systems and mitigate future Black Swan events because it’s based on the premise that you’re collecting any data that can answer any future question. The study of Black Swan events and practicing observability converges in one central point, which is in the data that you gather from your systems.

有一个词`黑天鹅`出自畅销书《反脆弱》，书中用`黑天鹅`比喻意外事件。
此书作者在他的另一本书《黑天鹅》中阐述，如果意外事件出现时我们能获得相关的数据，就能更好的降低风险。
`黑天鹅`事件在软件工程中出现的频率超出我们的想象，而且不可避免。
我们唯一能做的就是`黑天鹅`出现时能获得尽可能多的信息以避免严重影响生产系统。
可观测性帮助我们构建健壮的系统，因为可观测性允许我们收集任何数据。


## 问题

先看一段示例代码，每10秒调用一次`print`，`print`随机延迟一段时间
这段代码模拟一个场景：某段代码性能有问题，忽快忽慢，是否跟输入的参数有关系呢？
很明显，`print`的参数并没有记录到log里。

```java

public class MainApp {

    public static int print(int i) {
        try {
            Thread.sleep(new Random().nextInt(1000));
        } catch (InterruptedException e) {
        }
        System.out.println("count: " + i);
        return i;
    }

    public static void main(String[] args) {
        int i = 0;

        while (true) {
            print(i++);
            try {
                Thread.sleep(10 * 1000);
            } catch (InterruptedException e) {
            }
        }
    }

}

```

## 方法

正常的方式是暂停应用，打印`print`的参数到log里，重新编译部署启动应用，然后分析log。
如何能在不暂停应用的前提下实现相同的功能正是可观测行要解决的问题之一。

针对当前的java应用，我们可以借助开源项目 [byteman](https://github.com/bytemanproject/byteman)


此项目有3个核心模块  

1. byteman-agent  
基于javaagent技术实现，启动后监听指定端口，等待client连接之后发送指令。

2. byteman-install  
动态attach javaagent到一个运行中的jvm

3. byteman-submit  
作为client连接agent发送命令(通过自定义脚本动态修改字节码)获取运行时信息

## 实践

1. 编译  

```shell

git clone https://github.com/bytemanproject/byteman
cd byteman
mvn clean package

```

2. 运行agent

javaagent有两种使用方式，启动时加载和运行时attach

* 启动时加载javaagent  

```shell

java -javaagent:agent/target/byteman-agent-4.0.20.jar=address:0.0.0.0,port:9999 \      
  -cp demo/target/demo-4.0.20.jar \
  com.w.test.MainApp

```

* 运行时attach  

```shell

// 启动demo
java -cp demo/target/demo-4.0.20.jar com.w.test.MainApp &

// 获取进程id
> jps
9209 MainApp

//  attach
java -cp install/target/byteman-install-4.0.20.jar:{JAVA_HOME}/lib/tools.jar \
  org.jboss.byteman.agent.install.Install \
  -h 0.0.0.0 -p 9999 -b -s \
  9209

```

3. 发送指令

实现获取入参，返回值以及耗时的脚本: `rule.btm`    

```

# 拦截入口
RULE DemoTestEntry
CLASS com.w.test.MainApp
METHOD print(int)
AT ENTRY
BIND
    timerKey = Thread.currentThread().getName() + "#com.w.test.MainApp.print(int)";
IF ($1 % 2 == 0)
DO
    resetTimer(timerKey);
    System.out.println("*** param: " + $1);
ENDRULE

// 拦截返回
RULE DemoTestExit
CLASS com.w.test.MainApp
METHOD print(int)
AT EXIT
BIND
    timerKey = Thread.currentThread().getName() + "#com.w.test.MainApp.print(int)";
IF ($1 % 2 == 0)
DO
    System.out.println("*** return: " + $!);
    System.out.println("*** cost: " + getElapsedTimeFromTimer(timerKey));
ENDRULE

```

上传脚本

```shell

java -cp submit/target/byteman-submit-4.0.20.jar \
  org.jboss.byteman.agent.submit.Submit \
  -h 0.0.0.0 -p 9999 \
  -l demo/src/main/resources/rule.btm

```

运行结果

```

count: 96
count: 97
count: 98           // 上传脚本之前    
count: 99           // 上传脚本之后
*** param: 100      // 入参 
count: 100          // 程序自身逻辑
*** return: 100     // 返回值
*** cost: 683       // 耗时
count: 101
*** param: 102       
count: 102          
*** return: 102     
*** cost: 731 

```

## 原理

byteman基于[javaagent](/jekyll/2022/12/04/javaagent实现机制.html)



















