---
layout: post
title:  "数据结构和算法"
date:   2023-04-05 17:22:07 +0000
categories: jekyll
tags: ds
---

# 数据结构

Every data structure comes with tradeoffs. There is no single data structure that is perfect for every possible use case.

## 基础数据结构

### 静态数据结构-数组

Arrays provide a simple mechanism for storing multiple values in adjacent and indexable bins. 
An array is effectively a row of variables, a contiguous block of equal-sized bins in the computer’s memory. 
Each of the array’s bins can store a value of the given type, such as a number, a character, pointer, or even 
other (fixed-size) data structures. 

数组用于存储一组固定大小的元素，最大的特点是索引寻址很快，cpu直接支持`base + index * step`的寻址模式。
数组的缺点是需要预先指定大小以分配内存，扩容时需要复制数据。

### 动态数据结构-链表

Linked lists are the simplest example of a dynamic data structure, linked lists are composed of a chain of nodes linked together by pointers. A basic node in a linked list is a composite data structure containing two parts: a value (of any type) and a pointer to the 
next node in the list.


## 高级数据结构

## 磁盘数据结构


# 算法

## 算法复杂度

## 排序算法

### 插入排序

```java

public class InsertSort {
    
    public static void main(String[] args) {
        int[] arr = new int[] { 4, 7, 1, 9, 3, 6 };
        insertSort(arr);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    // n个元素插入排序
    // 假设[0, 0<=i<n-1>]已经有序，然后插入i+1
    static void insertSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; i++) {
            // 把i插入[0, i)中
            int ele = arr[i];
            int j = i - 1;
            
            while (j >= 0) {
                // 找到第一个比ele小的位置
                if (arr[j] < ele) {
                    break;
                }
    
                arr[j+1] = arr[j];
                j--;
            }
            arr[j + 1] = ele;
        }
    }

}

```

### 快速排序

```java

public class FastSort {
    
    public static void main(String[] args) {
        int[] arr = new int[] { 4, 7, 1, 9, 3, 6 };
        fastSort(arr, 0, arr.length - 1);

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
    
    // n个元素快速排序
    // 分而治之: 每轮都确定一个元素的最终位置
    static void fastSort(int[] arr, int low, int hi) {
        if (low >= hi) {
            return;
        }

        int origLow = low;
        int origHi = hi;
    
        // 任选一个元素作为分割点
        int ele = arr[low];
        // 分割点已保存，可以被覆盖
        int blank = low;
    
        while (low < hi) {
            // 先从右边找一个小的挪到左边
            while (low < hi) {
                if (arr[hi] < ele) {
                    arr[blank] = arr[hi];
                    blank = hi;
                    break;
                }
                hi--;
            }
    
            // 再从左边找一个大的挪到右边
            while (low < hi) {
                if (arr[low] > ele) {
                    arr[blank] = arr[low];
                    blank = low;
                    break;
                }
                low++;
            }
        }
    
        arr[blank] = ele;
    
        fastSort(arr, origLow, blank - 1);
        fastSort(arr, blank + 1, origHi);
    }

}

```

## 搜索算法

### 二分查找

```java

public class BinarySearch {
    
    public static void main(String[] args) {
        int[] arr = new int[] { 1,3,4,6,7,9 };
        int index = binarySearch(arr, 6);
        System.out.println(index);
    }

    static int binarySearch(int[] arr, int key) {

        int low = 0;
        int hi = arr.length;

        while (low < hi) {
            int mid = (low + hi) / 2;
            if (arr[mid] > key) {
                hi = mid - 1;
            } else if (arr[mid] < key) {
                low = mid + 1;
            } else {
                return mid;
            }
        }

        if (arr[low] == key) {
            return low;
        }

        return -1;
    }

}

```